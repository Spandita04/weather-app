{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KACMA,EACG,mCADHA,EAEI,2CAuEKC,MApEf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEmBF,mBAAS,IAF5B,mBAEJG,EAFI,KAEKC,EAFL,KA4BX,OAAS,sBACDC,UACwB,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAM,WAAsB,MAFxF,UAIL,iCAEA,sBACIF,UAAY,aADhB,UAEA,uBACMG,KAAO,OACbH,UAAY,aACZI,YAAc,YACdC,SAAa,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACpCA,MAAUZ,EACVa,WAtCW,SAAAC,GACK,UAAZA,EAAIC,KACJC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACrDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,SAuBxB,OAFA,IAa4B,oBAAhBlB,EAAQG,KAAyB,gCAErC,sBACID,UAAY,eADhB,UAEA,sBACIA,UAAY,WADhB,cAC+BF,EAAQqB,KADvC,KACiDrB,EAAQsB,IAAIC,QAD7D,OAFA,IAG+E,sBAC3ErB,UAAY,OAD+D,cAlCvE,SAACsB,GACjB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA0BCE,CAAY,IAAIC,MADoC,OAH/E,OAFqC,IAO/B,sBACFhC,UAAY,cADV,UAEN,sBACIA,UAAY,OADhB,cAC2BiC,KAAKC,MAAMpC,EAAQG,KAAKC,MADnD,aAFM,IAKA,sBACFF,UAAY,UADV,cACwBF,EAAQA,QAAQ,GAAGG,KAD3C,OALA,OAP+B,OAgBpC,GA7BT,OAJK,QCtBEkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.983978c6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nconst api = {\r\n    key: \"33f488fea4708fa66b4eb8d92ab1bc3b\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\n\r\nfunction App() {\r\n    const [query, setQuery] = useState('');\r\n    const [weather, setWeather] = useState({});\r\n\r\n    const search = evt => {\r\n        if (evt.key === \"Enter\") {\r\n            fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n                .then(res => res.json())\r\n                .then(result => {\r\n                    setWeather(result);\r\n                    setQuery('');\r\n                    console.log(result);\r\n                });\r\n        }\r\n    }\r\n\r\n    const dateBuilder = (d) => {\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n        let day = days[d.getDay()];\r\n        let date = d.getDate();\r\n        let month = months[d.getMonth()];\r\n        let year = d.getFullYear();\r\n\r\n        return `${day} ${date} ${month} ${year}`\r\n    }\r\n\r\n    return ( <\r\n        div className = {\r\n            (typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'\r\n        } >\r\n        <\r\n        main >\r\n        <\r\n        div className = \"search-box\" >\r\n        <\r\n        input type = \"text\"\r\n        className = \"search-bar\"\r\n        placeholder = \"Search...\"\r\n        onChange = { e => setQuery(e.target.value) }\r\n        value = { query }\r\n        onKeyPress = { search }\r\n        /> < /\r\n        div > {\r\n            (typeof weather.main != \"undefined\") ? ( <\r\n                div >\r\n                <\r\n                div className = \"location-box\" >\r\n                <\r\n                div className = \"location\" > { weather.name }, { weather.sys.country } < /div> <\r\n                div className = \"date\" > { dateBuilder(new Date()) } < /div> < /\r\n                div > <\r\n                div className = \"weather-box\" >\r\n                <\r\n                div className = \"temp\" > { Math.round(weather.main.temp) }Â°\r\n                c <\r\n                /div> <\r\n                div className = \"weather\" > { weather.weather[0].main } < /div> < /\r\n                div > <\r\n                /div>\r\n            ) : ('')\r\n        } <\r\n        /main> < /\r\n        div >\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}